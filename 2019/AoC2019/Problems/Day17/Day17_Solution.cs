using Aoc.AoC2019.IntCode;
using AoC.Common;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Aoc.AoC2019.Problems.Day17
{
    public class Day17_Solution :AoCSolution
    {
        public override int Year => 2019;

        public override int Day => 17;

        public override string Name => "Day 17: Set and Forget";

        public override string InputFileName => "Day17.txt";


        public override IEnumerable<string> Solve(IEnumerable<string> input)
        {            
            yield return CalibrateCamera(input.First()).ToString();

            // The final part is generated by hand - but we need to know the path through the scaffolding before generating this
         //   yield return CalculatePath(input.First());
            yield return CollectDust(input.First()).ToString();
        }      

        private int CalibrateCamera(string input)
        {
            IVirtualMachine vm = new IntCodeVM(input);
            Robot robot = new Robot(vm);
            robot.DrawMap();
            // Count the intersections
            var inter = robot.FindIntersections();
            return inter.Select(p => p.X * p.Y).Sum();
        }

        private long CollectDust(string input)
        {
            var data = IntCodeVM.ParseStringData(input);
            data[0] = 2;
            var inputs = CreateInputs(DustPath);  // Get hand-coded input values

            IVirtualMachine vm = new IntCodeVM(data, inputs.ToArray());
            vm.Execute();

            List<long> results = vm.Outputs.DequeueToList();
            return results.Last();
        }

        // Converts a string path into an input array.
        private List<long> CreateInputs(string path)
        {
            List<long> output = new List<long>();
            foreach (char c in path)
            {
                output.Add((long)c);
            }
            return output;
        }


        /// <summary>
        /// Calculates the path through the maze
        /// Used for 2nd problem - and final solution generated by hand.
        /// </summary>
        /// <param name="robot"></param>
        /// <returns></returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("CodeQuality", "IDE0051:Remove unused private members", Justification = "<Pending>")]
        private string CalculatePath(string input)
        {
            IVirtualMachine vm = new IntCodeVM(input);
            Robot robot = new Robot(vm);
            var path = robot.FindPath();
            return ($"Path length: " + String.Join(", ", path));
        }
      
        private static readonly string DustPath = "A,B,A,B,C,B,C,A,C,C\nR,12,L,10,L,10\nL,6,L,12,R,12,L,4\nL,12,R,12,L,6\nn\n";

    }
}
